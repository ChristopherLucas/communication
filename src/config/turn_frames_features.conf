///////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file to extract a pseudo         //////////////////
/////////   auditory spectrum: 26 mel-band spectrum with equal       //////////////////
/////////   loudness weighting, delta and acceleration coefficients  //////////////////
/////////                                                            //////////////////
///////// (c) 2013-2016 audEERING.                                   //////////////////
/////////     All rights reserverd. See file COPYING for details.    //////////////////
///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////
;
; This section is always required in openSMILE configuration files
;   it configures the componentManager and gives a list of all components which are to be loaded
; The order in which the components are listed should match
;   the order of the data flow for most efficient processing
;
///////////////////////////////////////////////////////////////////////////////////////
[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory

[componentInstances:cComponentManager]
instance[waveIn].type=cWaveSource

[waveIn:cWaveSource]
writer.dmLevel=wave
buffersize_sec = 5.0
filename=\cm[inputfile(I){test.wav}:name of input file]
start=\cm[start{0}:audio start position in seconds]
end=\cm[end{-1}:audio end position in seconds, -1 for end of file]
monoMixdown=1
outFieldName = pcm


[componentInstances:cComponentManager]
 ; audio framer
instance[audspec_frame].type=cFramer
 ; speech pre-emphasis (on a per frame basis as HTK does it)
instance[audspec_pe].type=cVectorPreemphasis
 ; apply a window function to pre-emphasised frames
instance[audspec_win].type=cWindower
 ; transform to the frequency domain using FFT
instance[audspec_fft].type=cTransformFFT
 ; compute magnitude of the complex fft from the previous component
instance[audspec_fftmag].type=cFFTmagphase
 ; compute critical-bands from magnitude spectrum
instance[audspec_melspec].type=cMelspec
 ; compute PLP from critical-band spectrum
instance[audspec_plp].type=cPlp
 ; compute delta coefficients from mfcc and energy
instance[audspec_delta].type=cDeltaRegression
 ; compute acceleration coefficients from delta coefficients of mfcc and energy
instance[audspec_accel].type=cDeltaRegression
 ;; VAD (energy-based)
instance[energy].type=cEnergy
instance[turn].type=cTurnDetector

; run single threaded (nThreads=1)
; NOTE: a single thread is more efficient for processing small files, since multi-threaded processing involves more
;       overhead during startup, which will make the system slower in the end
nThreads=1
; do not show any internal dataMemory level settings
; (if you want to see them set the value to 1, 2, 3, or 4, depending on the amount of detail you wish)
printLevelStats=0


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////   component configuration  ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
; the following sections configure the components listed above
; a help on configuration parameters can be obtained with
;  SMILExtract -H
; or
;  SMILExtract -H configTypeName (= componentTypeName)
/////////////////////////////////////////////////////////////////////////////////////////////

[audspec_frame:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
frameSize = 0.0250
frameStep = 0.010
frameMode = fixed
frameCenterSpecial = left

[audspec_pe:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
k=0.97
de=0

[audspec_win:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframes
 ; hamming window
winFunc = ham
 ; no gain
gain = 1.0
offset = 0

[energy:cEnergy]
reader.dmLevel=winframes
writer.dmLevel=energy
rms=1
log=0

// the voice activity detection (turn detector)
[turn:cTurnDetector]
reader.dmLevel=energy
writer.dmLevel=isTurn
 ; overwrite data in output level, if it has not been read and level is full
 ; we must set this here, since the level isTurn is a dead-end in our configuration
 ; writer.levelconf.noHang=1
 ; send a message to the functionals component at turn end
messageRecp = functL1
 ; send turn start / turn end event messages to the debug turn wave file output component
eventRecp = turnDump
  ;; you may not increase this over the writer.levelconf.nT value of the lld and lld_de levels!
  ;; so by default not more than 24!
maxTurnLength = 12
maxTurnLengthGrace = 3
idx = 0
nPost = 30
nPre = 10
useRMS = 1
 ; disable auto adjustment of VAD threshold, this does not work well yet.
autoThreshold = 0
 ; instead, set the threshold manually to a default value.
 ; this derived from the RMS energy from normalised sample values (0..1)
 ; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------
threshold = 0.0015
 ; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------

[audspec_fft:cTransformFFT]
reader.dmLevel=winframes 
writer.dmLevel=fft

[audspec_fftmag:cFFTmagphase]
reader.dmLevel=fft
writer.dmLevel=fftmag

[audspec_melspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=melspec
; htk compatible sample value scaling
htkcompatible = 1
nBands = 26
; use power spectrum instead of magnitude spectrum
usePower = 1
lofreq = 0
hifreq = 8000
specScale = mel

[audspec_plp:cPlp]
reader.dmLevel=melspec
writer.dmLevel=plp
firstCC = 0
lpOrder = 5
cepLifter = 22
compression = 0.33
htkcompatible = 1
doIDFT = 0
doLpToCeps = 0
doLP = 0
doInvLog = 0
doAud = 1
doLog = 0

[audspec_delta:cDeltaRegression]
reader.dmLevel=plp
writer.dmLevel=plpde
deltawin=2
blocksize=1

[audspec_accel:cDeltaRegression]
reader.dmLevel=plpde
writer.dmLevel=plpdede
deltawin=2
blocksize=1

[componentInstances:cComponentManager]
instance[audspec_lldconcat].type=cVectorConcat

[audspec_lldconcat:cVectorConcat]
reader.dmLevel = plp;plpde;plpdede
writer.dmLevel = lld
includeSingleElementFields = 1

  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////
;;;;;;;;; output LLD features to CSV ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[componentInstances:cComponentManager]
instance[lldrcppdatasink].type=cRcppDataSink

[lldrcppdatasink:cRcppDataSink]
reader.dmLevel = lld
timestamp = \cm[timestampcsv{1}:set to 0 to suppress timestamp column, default is 1, i.e. to show timestamp in second column] 
number = 0
frameIndex = 0
frameTime = \cm[timestamparff{1}:set to 0 to suppress timestamp column, default is 1, i.e. to show timestamp in second column] 
errorOnNoOutput = 1


//////---------------------- END -------------------------///////
