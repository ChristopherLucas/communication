// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmvnorm_cens
arma::vec dmvnorm_cens(arma::mat X, arma::rowvec mu, arma::mat Sigma, arma::uvec missingness_labels_i, std::vector< arma::uvec > nonmissing_features, bool logd, double lambda);
RcppExport SEXP _communication_dmvnorm_cens(SEXP XSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP missingness_labels_iSEXP, SEXP nonmissing_featuresSEXP, SEXP logdSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type missingness_labels_i(missingness_labels_iSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type nonmissing_features(nonmissing_featuresSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cens(X, mu, Sigma, missingness_labels_i, nonmissing_features, logd, lambda));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_cond
arma::vec dmvnorm_cond(arma::mat X, arma::rowvec mu, arma::mat Sigma, arma::uvec labels_t, arma::uvec labels_y, bool logd, double lambda);
RcppExport SEXP _communication_dmvnorm_cond(SEXP XSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP labels_tSEXP, SEXP labels_ySEXP, SEXP logdSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type labels_t(labels_tSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type labels_y(labels_ySEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cond(X, mu, Sigma, labels_t, labels_y, logd, lambda));
    return rcpp_result_gen;
END_RCPP
}
// forward
arma::mat forward(arma::rowvec delta, arma::mat Gamma, arma::mat tstateprobs, arma::vec scale);
RcppExport SEXP _communication_forward(SEXP deltaSEXP, SEXP GammaSEXP, SEXP tstateprobsSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tstateprobs(tstateprobsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(forward(delta, Gamma, tstateprobs, scale));
    return rcpp_result_gen;
END_RCPP
}
// backward
arma::mat backward(arma::mat Gamma, arma::mat tstateprobs, arma::vec scale);
RcppExport SEXP _communication_backward(SEXP GammaSEXP, SEXP tstateprobsSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tstateprobs(tstateprobsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(backward(Gamma, tstateprobs, scale));
    return rcpp_result_gen;
END_RCPP
}
// hmm_cpp
Rcpp::List hmm_cpp(std::vector<arma::mat> Xs, arma::vec weights, arma::rowvec delta_init, arma::mat mus_init, std::vector<arma::mat> Sigmas_init, arma::mat Gamma_init, std::vector<arma::mat> zetas_init, std::vector< arma::uvec > nonmissing, std::vector< arma::uvec > missingness_labels, std::vector< arma::uvec > nonmissing_features, double lambda, double tol, arma::uword maxiter, double uncollapse, bool verbose, bool supervised);
RcppExport SEXP _communication_hmm_cpp(SEXP XsSEXP, SEXP weightsSEXP, SEXP delta_initSEXP, SEXP mus_initSEXP, SEXP Sigmas_initSEXP, SEXP Gamma_initSEXP, SEXP zetas_initSEXP, SEXP nonmissingSEXP, SEXP missingness_labelsSEXP, SEXP nonmissing_featuresSEXP, SEXP lambdaSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP uncollapseSEXP, SEXP verboseSEXP, SEXP supervisedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type delta_init(delta_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mus_init(mus_initSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Sigmas_init(Sigmas_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma_init(Gamma_initSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type zetas_init(zetas_initSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type nonmissing(nonmissingSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type missingness_labels(missingness_labelsSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type nonmissing_features(nonmissing_featuresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type uncollapse(uncollapseSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type supervised(supervisedSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_cpp(Xs, weights, delta_init, mus_init, Sigmas_init, Gamma_init, zetas_init, nonmissing, missingness_labels, nonmissing_features, lambda, tol, maxiter, uncollapse, verbose, supervised));
    return rcpp_result_gen;
END_RCPP
}
// hmm_autocorr_cpp
Rcpp::List hmm_autocorr_cpp(std::vector<arma::mat> Xs, arma::vec weights, arma::rowvec delta_init, arma::mat mus_init, std::vector<arma::mat> Sigmas_init, arma::mat Gamma_init, std::vector<arma::mat> zetas_init, arma::uvec labels_t, arma::uvec labels_y, double lambda, double tol, arma::uword maxiter, double uncollapse, bool verbose, bool supervised);
RcppExport SEXP _communication_hmm_autocorr_cpp(SEXP XsSEXP, SEXP weightsSEXP, SEXP delta_initSEXP, SEXP mus_initSEXP, SEXP Sigmas_initSEXP, SEXP Gamma_initSEXP, SEXP zetas_initSEXP, SEXP labels_tSEXP, SEXP labels_ySEXP, SEXP lambdaSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP uncollapseSEXP, SEXP verboseSEXP, SEXP supervisedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type delta_init(delta_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mus_init(mus_initSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Sigmas_init(Sigmas_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma_init(Gamma_initSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type zetas_init(zetas_initSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type labels_t(labels_tSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type labels_y(labels_ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type uncollapse(uncollapseSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type supervised(supervisedSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_autocorr_cpp(Xs, weights, delta_init, mus_init, Sigmas_init, Gamma_init, zetas_init, labels_t, labels_y, lambda, tol, maxiter, uncollapse, verbose, supervised));
    return rcpp_result_gen;
END_RCPP
}
// llh_cpp
Rcpp::List llh_cpp(std::vector<arma::mat> Xs, arma::rowvec delta, arma::mat mus, std::vector<arma::mat> Sigmas_in, arma::mat Gamma, std::vector< arma::uvec > nonmissing, std::vector< arma::uvec > missingness_labels, std::vector< arma::uvec > nonmissing_features, double lambda, bool verbose);
RcppExport SEXP _communication_llh_cpp(SEXP XsSEXP, SEXP deltaSEXP, SEXP musSEXP, SEXP Sigmas_inSEXP, SEXP GammaSEXP, SEXP nonmissingSEXP, SEXP missingness_labelsSEXP, SEXP nonmissing_featuresSEXP, SEXP lambdaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mus(musSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Sigmas_in(Sigmas_inSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type nonmissing(nonmissingSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type missingness_labels(missingness_labelsSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type nonmissing_features(nonmissing_featuresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(llh_cpp(Xs, delta, mus, Sigmas_in, Gamma, nonmissing, missingness_labels, nonmissing_features, lambda, verbose));
    return rcpp_result_gen;
END_RCPP
}
// lstateprobs_cpp
Rcpp::List lstateprobs_cpp(std::vector<arma::mat> Xs, arma::mat mus, std::vector<arma::mat> Sigmas_in, std::vector< arma::uvec > nonmissing, std::vector< arma::uvec > missingness_labels, std::vector< arma::uvec > nonmissing_features, double lambda);
RcppExport SEXP _communication_lstateprobs_cpp(SEXP XsSEXP, SEXP musSEXP, SEXP Sigmas_inSEXP, SEXP nonmissingSEXP, SEXP missingness_labelsSEXP, SEXP nonmissing_featuresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mus(musSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Sigmas_in(Sigmas_inSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type nonmissing(nonmissingSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type missingness_labels(missingness_labelsSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type nonmissing_features(nonmissing_featuresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lstateprobs_cpp(Xs, mus, Sigmas_in, nonmissing, missingness_labels, nonmissing_features, lambda));
    return rcpp_result_gen;
END_RCPP
}
// viterbi_cpp
std::vector< std::vector<arma::uword> > viterbi_cpp(std::vector<arma::mat> lstateprobs, arma::rowvec delta, arma::mat Gamma);
RcppExport SEXP _communication_viterbi_cpp(SEXP lstateprobsSEXP, SEXP deltaSEXP, SEXP GammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type lstateprobs(lstateprobsSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi_cpp(lstateprobs, delta, Gamma));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parseAudioFile
SEXP rcpp_parseAudioFile(std::string strWavfile);
RcppExport SEXP _communication_rcpp_parseAudioFile(SEXP strWavfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type strWavfile(strWavfileSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parseAudioFile(strWavfile));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_subsetWavFile
SEXP rcpp_subsetWavFile(std::string strWavfile, double startSubWav, double endSubWav);
RcppExport SEXP _communication_rcpp_subsetWavFile(SEXP strWavfileSEXP, SEXP startSubWavSEXP, SEXP endSubWavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type strWavfile(strWavfileSEXP);
    Rcpp::traits::input_parameter< double >::type startSubWav(startSubWavSEXP);
    Rcpp::traits::input_parameter< double >::type endSubWav(endSubWavSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_subsetWavFile(strWavfile, startSubWav, endSubWav));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_playWavFile
bool rcpp_playWavFile(Rcpp::List header, std::vector<int32_t> rawData);
RcppExport SEXP _communication_rcpp_playWavFile(SEXP headerSEXP, SEXP rawDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type header(headerSEXP);
    Rcpp::traits::input_parameter< std::vector<int32_t> >::type rawData(rawDataSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_playWavFile(header, rawData));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_playWavFileSubset
bool rcpp_playWavFileSubset(Rcpp::List headerList, std::vector<int32_t> rawData, double startSubWav, double endSubWav);
RcppExport SEXP _communication_rcpp_playWavFileSubset(SEXP headerListSEXP, SEXP rawDataSEXP, SEXP startSubWavSEXP, SEXP endSubWavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type headerList(headerListSEXP);
    Rcpp::traits::input_parameter< std::vector<int32_t> >::type rawData(rawDataSEXP);
    Rcpp::traits::input_parameter< double >::type startSubWav(startSubWavSEXP);
    Rcpp::traits::input_parameter< double >::type endSubWav(endSubWavSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_playWavFileSubset(headerList, rawData, startSubWav, endSubWav));
    return rcpp_result_gen;
END_RCPP
}
// test_rcpp_playWavFileSubset
bool test_rcpp_playWavFileSubset(std::string strWavfile, double startSubWav, double endSubWav);
RcppExport SEXP _communication_test_rcpp_playWavFileSubset(SEXP strWavfileSEXP, SEXP startSubWavSEXP, SEXP endSubWavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type strWavfile(strWavfileSEXP);
    Rcpp::traits::input_parameter< double >::type startSubWav(startSubWavSEXP);
    Rcpp::traits::input_parameter< double >::type endSubWav(endSubWavSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rcpp_playWavFileSubset(strWavfile, startSubWav, endSubWav));
    return rcpp_result_gen;
END_RCPP
}
// test_rcpp_playWavFile
SEXP test_rcpp_playWavFile(std::string strWavfile);
RcppExport SEXP _communication_test_rcpp_playWavFile(SEXP strWavfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type strWavfile(strWavfileSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rcpp_playWavFile(strWavfile));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_writeAudioFile
void rcpp_writeAudioFile(Rcpp::List header, std::vector<int32_t> rawData, std::string filePath);
RcppExport SEXP _communication_rcpp_writeAudioFile(SEXP headerSEXP, SEXP rawDataSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type header(headerSEXP);
    Rcpp::traits::input_parameter< std::vector<int32_t> >::type rawData(rawDataSEXP);
    Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP);
    rcpp_writeAudioFile(header, rawData, filePath);
    return R_NilValue;
END_RCPP
}
// rcpp_writeAudioFileStereo
void rcpp_writeAudioFileStereo(Rcpp::List header, std::vector<int32_t> rawDataL, std::vector<int32_t> rawDataR, std::string filePath);
RcppExport SEXP _communication_rcpp_writeAudioFileStereo(SEXP headerSEXP, SEXP rawDataLSEXP, SEXP rawDataRSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type header(headerSEXP);
    Rcpp::traits::input_parameter< std::vector<int32_t> >::type rawDataL(rawDataLSEXP);
    Rcpp::traits::input_parameter< std::vector<int32_t> >::type rawDataR(rawDataRSEXP);
    Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP);
    rcpp_writeAudioFileStereo(header, rawDataL, rawDataR, filePath);
    return R_NilValue;
END_RCPP
}
// test_rcpp_writeWavFile
void test_rcpp_writeWavFile(std::string filePathIn, std::string filePathOut);
RcppExport SEXP _communication_test_rcpp_writeWavFile(SEXP filePathInSEXP, SEXP filePathOutSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filePathIn(filePathInSEXP);
    Rcpp::traits::input_parameter< std::string >::type filePathOut(filePathOutSEXP);
    test_rcpp_writeWavFile(filePathIn, filePathOut);
    return R_NilValue;
END_RCPP
}
// rcpp_openSmileGetFeatures
SEXP rcpp_openSmileGetFeatures(std::vector<std::string> audio_files_in, std::string config_string_in);
RcppExport SEXP _communication_rcpp_openSmileGetFeatures(SEXP audio_files_inSEXP, SEXP config_string_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type audio_files_in(audio_files_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type config_string_in(config_string_inSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_openSmileGetFeatures(audio_files_in, config_string_in));
    return rcpp_result_gen;
END_RCPP
}
// test_rcpp_openSmileGetFeatures
SEXP test_rcpp_openSmileGetFeatures(std::vector<std::string> audio_files_in, std::string config_file_in);
RcppExport SEXP _communication_test_rcpp_openSmileGetFeatures(SEXP audio_files_inSEXP, SEXP config_file_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type audio_files_in(audio_files_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type config_file_in(config_file_inSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rcpp_openSmileGetFeatures(audio_files_in, config_file_in));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_openSmileGetBorderFrames
SEXP rcpp_openSmileGetBorderFrames(std::vector<std::string> audio_files_in, std::string config_string_in);
RcppExport SEXP _communication_rcpp_openSmileGetBorderFrames(SEXP audio_files_inSEXP, SEXP config_string_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type audio_files_in(audio_files_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type config_string_in(config_string_inSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_openSmileGetBorderFrames(audio_files_in, config_string_in));
    return rcpp_result_gen;
END_RCPP
}
// test_rcpp_openSmileGetBorderFrames
SEXP test_rcpp_openSmileGetBorderFrames(std::vector<std::string> audio_files_in, std::string config_file_in);
RcppExport SEXP _communication_test_rcpp_openSmileGetBorderFrames(SEXP audio_files_inSEXP, SEXP config_file_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type audio_files_in(audio_files_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type config_file_in(config_file_inSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rcpp_openSmileGetBorderFrames(audio_files_in, config_file_in));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_openSmileMain
SEXP rcpp_openSmileMain(std::vector<std::string> arguments);
RcppExport SEXP _communication_rcpp_openSmileMain(SEXP argumentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type arguments(argumentsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_openSmileMain(arguments));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_openSmileGetFeatures_Turns
SEXP rcpp_openSmileGetFeatures_Turns(std::vector<std::string> audio_files_in, std::string config_string_in);
RcppExport SEXP _communication_rcpp_openSmileGetFeatures_Turns(SEXP audio_files_inSEXP, SEXP config_string_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type audio_files_in(audio_files_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type config_string_in(config_string_inSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_openSmileGetFeatures_Turns(audio_files_in, config_string_in));
    return rcpp_result_gen;
END_RCPP
}
// test_rcpp_openSmileGetFeatures_Turns
SEXP test_rcpp_openSmileGetFeatures_Turns(std::vector<std::string> audio_files_in, std::string config_file_in);
RcppExport SEXP _communication_test_rcpp_openSmileGetFeatures_Turns(SEXP audio_files_inSEXP, SEXP config_file_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type audio_files_in(audio_files_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type config_file_in(config_file_inSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rcpp_openSmileGetFeatures_Turns(audio_files_in, config_file_in));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_communication_dmvnorm_cens", (DL_FUNC) &_communication_dmvnorm_cens, 7},
    {"_communication_dmvnorm_cond", (DL_FUNC) &_communication_dmvnorm_cond, 7},
    {"_communication_forward", (DL_FUNC) &_communication_forward, 4},
    {"_communication_backward", (DL_FUNC) &_communication_backward, 3},
    {"_communication_hmm_cpp", (DL_FUNC) &_communication_hmm_cpp, 16},
    {"_communication_hmm_autocorr_cpp", (DL_FUNC) &_communication_hmm_autocorr_cpp, 15},
    {"_communication_llh_cpp", (DL_FUNC) &_communication_llh_cpp, 10},
    {"_communication_lstateprobs_cpp", (DL_FUNC) &_communication_lstateprobs_cpp, 7},
    {"_communication_viterbi_cpp", (DL_FUNC) &_communication_viterbi_cpp, 3},
    {"_communication_rcpp_parseAudioFile", (DL_FUNC) &_communication_rcpp_parseAudioFile, 1},
    {"_communication_rcpp_subsetWavFile", (DL_FUNC) &_communication_rcpp_subsetWavFile, 3},
    {"_communication_rcpp_playWavFile", (DL_FUNC) &_communication_rcpp_playWavFile, 2},
    {"_communication_rcpp_playWavFileSubset", (DL_FUNC) &_communication_rcpp_playWavFileSubset, 4},
    {"_communication_test_rcpp_playWavFileSubset", (DL_FUNC) &_communication_test_rcpp_playWavFileSubset, 3},
    {"_communication_test_rcpp_playWavFile", (DL_FUNC) &_communication_test_rcpp_playWavFile, 1},
    {"_communication_rcpp_writeAudioFile", (DL_FUNC) &_communication_rcpp_writeAudioFile, 3},
    {"_communication_rcpp_writeAudioFileStereo", (DL_FUNC) &_communication_rcpp_writeAudioFileStereo, 4},
    {"_communication_test_rcpp_writeWavFile", (DL_FUNC) &_communication_test_rcpp_writeWavFile, 2},
    {"_communication_rcpp_openSmileGetFeatures", (DL_FUNC) &_communication_rcpp_openSmileGetFeatures, 2},
    {"_communication_test_rcpp_openSmileGetFeatures", (DL_FUNC) &_communication_test_rcpp_openSmileGetFeatures, 2},
    {"_communication_rcpp_openSmileGetBorderFrames", (DL_FUNC) &_communication_rcpp_openSmileGetBorderFrames, 2},
    {"_communication_test_rcpp_openSmileGetBorderFrames", (DL_FUNC) &_communication_test_rcpp_openSmileGetBorderFrames, 2},
    {"_communication_rcpp_openSmileMain", (DL_FUNC) &_communication_rcpp_openSmileMain, 1},
    {"_communication_rcpp_openSmileGetFeatures_Turns", (DL_FUNC) &_communication_rcpp_openSmileGetFeatures_Turns, 2},
    {"_communication_test_rcpp_openSmileGetFeatures_Turns", (DL_FUNC) &_communication_test_rcpp_openSmileGetFeatures_Turns, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_communication(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
