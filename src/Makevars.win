PORTAUDIO_SRCS_TEMPLATE = portaudio/src/hostapi/wmme/pa_win_wmme.c portaudio/src/os/win/pa_win_coinitialize.c portaudio/src/os/win/pa_win_hostapis.c portaudio/src/os/win/pa_win_util.c portaudio/src/os/win/pa_win_waveformat.c
PORTAUDIO_LIBS = -lwinmm -lm -lole32 -luuid
PORTAUDIO_DEFINES_INCLUDES =  -DPA_LITTLE_ENDIAN -I portaudio/include -I portaudio/src/common -I portaudio/src/os/win -DPA_USE_ASIO=0 -DPA_USE_WDMKS=0 -DPA_USE_DS=0 -DPA_USE_WASAPI=0 -DPA_USE_WMME=1
#PORTAUDIO_CFLAGS =  -mthreads

#DEFS = -DPACKAGE_NAME=\"RcppOpenSmile\" -DPACKAGE_TARNAME=\"rcppopensmile\" -DPACKAGE_VERSION=\"0.0.0\" -DPACKAGE_STRING=\"RcppOpenSmile\ 0.0.0\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DHAVE_SYS_SOUNDCARD_H=1 -DSIZEOF_SHORT=2 -DSIZEOF_INT=4 -DSIZEOF_LONG=8 -DHAVE_CLOCK_GETTIME=1 -DHAVE_NANOSLEEP=1
CXX_STD = CXX11
MAKEFLAGS = -j12

PKG_CXXFLAGS = -std=gnu++11
#PKG_CFLAGS = $(PORTAUDIO_CFLAGS)
PKG_CPPFLAGS = $(PORTAUDIO_DEFINES_INCLUDES) -DHAVE_MPGLIB -DHAVE_STRCHR -DHAVE_MEMCPY -DARMA_DONT_PRINT_ERRORS -DSTRICT_R_HEADERS -DOPENSMILE_BUILD -DHAVE_PORTAUDIO -DBUILD_LIBSVM -DBUILD_WITHOUT_EXPERIMENTAL -DHAVE_PORTAUDIO_V19 -I portaudio/src/common -I portaudio/include -I opensmile/src/include -I develop/include -I lame-wrapper -I lame/include -I lame/libmp3lame  -I lame/mpglib -I windows -I mp3 -I utils  -I conf#-DDevelopVersion
PKG_LIBS =  $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) $(PORTAUDIO_LIBS)

OpSm_P = opensmile/src
Core_P = opensmile/src/core
PortCom_P = portaudio/src/common
Mp3Lame_P = lame/libmp3lame
Mpglib_P = lame/mpglib
Wnd_P = windows
Mp3_P = mp3
Utils_P = utils


SOURCES_CPP.top = crcppdatabase.cpp crcppwav.cpp RcppExports.cpp rcpp_opensmile_Main.cpp hmm.cpp
SOURCES_CPP.core = $(Core_P)/commandlineParser.cpp $(Core_P)/componentManager.cpp $(Core_P)/configManager.cpp $(Core_P)/dataMemory.cpp $(Core_P)/dataProcessor.cpp $(Core_P)/dataReader.cpp $(Core_P)/dataSelector.cpp $(Core_P)/dataSink.cpp $(Core_P)/dataSource.cpp $(Core_P)/dataWriter.cpp $(Core_P)/exceptions.cpp $(Core_P)/nullSink.cpp $(Core_P)/smileCommon.cpp $(Core_P)/smileComponent.cpp $(Core_P)/smileLogger.cpp  $(Core_P)/vectorProcessor.cpp  $(Core_P)/vectorTransform.cpp $(Core_P)/vecToWinProcessor.cpp $(Core_P)/windowProcessor.cpp $(Core_P)/winToVecProcessor.cpp
SOURCES_CPP.others = $(OpSm_P)/dspcore/acf.cpp $(OpSm_P)/smileutil/smileUtil_cpp.cpp $(OpSm_P)/iocore/waveSource.cpp $(OpSm_P)/dspcore/framer.cpp $(OpSm_P)/dspcore/turnDetector.cpp $(OpSm_P)/dspcore/windower.cpp $(OpSm_P)/iocore/RcppDataSink.cpp $(OpSm_P)/functionals/functionals.cpp $(OpSm_P)/lldcore/mzcr.cpp $(OpSm_P)/lldcore/intensity.cpp $(OpSm_P)/dspcore/transformFft.cpp $(OpSm_P)/dspcore/fftmagphase.cpp $(OpSm_P)/lldcore/melspec.cpp $(OpSm_P)/other/vectorConcat.cpp $(OpSm_P)/dspcore/vectorPreemphasis.cpp $(OpSm_P)/dspcore/deltaRegression.cpp $(OpSm_P)/lldcore/energy.cpp $(OpSm_P)/lldcore/plp.cpp $(OpSm_P)/lldcore/mfcc.cpp $(OpSm_P)/lld/formantLpc.cpp $(OpSm_P)/lld/lpc.cpp $(OpSm_P)/smileutil/zerosolve.cpp  
SOURCES_CPP.windows = $(Wnd_P)/io_win32.cpp
SOURCES_CPP.mp3 = $(Mp3_P)/id3.cpp
SOURCES_CPP.utils = $(Utils_P)/utils_global.cpp
SOURCES_CPP = $(SOURCES_CPP.utils) $(SOURCES_CPP.mp3) $(SOURCES_CPP.windows) $(SOURCES_CPP.top) $(SOURCES_CPP.core) $(SOURCES_CPP.others)

SOURCES_C.opensmile = $(OpSm_P)/dspcore/fftsg.c $(OpSm_P)/smileutil/smileUtil.c $(OpSm_P)/smileutil/smileUtilSpline.c
SOURCES_C.port_com = $(PortCom_P)/pa_allocation.c $(PortCom_P)/pa_cpuload.c $(PortCom_P)/pa_front.c $(PortCom_P)/pa_stream.c $(PortCom_P)/pa_ringbuffer.c $(PortCom_P)/pa_debugprint.c $(PortCom_P)/pa_process.c $(PortCom_P)/pa_converters.c $(PortCom_P)/pa_dither.c
SOURCES_C.mp3lame = $(Mp3Lame_P)/vector/xmm_quantize_sub.c $(Mp3Lame_P)/bitstream.c $(Mp3Lame_P)/encoder.c $(Mp3Lame_P)/fft.c $(Mp3Lame_P)/gain_analysis.c $(Mp3Lame_P)/id3tag.c $(Mp3Lame_P)/lame.c $(Mp3Lame_P)/mpglib_interface.c $(Mp3Lame_P)/newmdct.c $(Mp3Lame_P)/presets.c $(Mp3Lame_P)/psymodel.c $(Mp3Lame_P)/quantize.c $(Mp3Lame_P)/quantize_pvt.c $(Mp3Lame_P)/reservoir.c $(Mp3Lame_P)/set_get.c $(Mp3Lame_P)/tables.c $(Mp3Lame_P)/takehiro.c $(Mp3Lame_P)/util.c $(Mp3Lame_P)/vbrquantize.c $(Mp3Lame_P)/VbrTag.c $(Mp3Lame_P)/version.c
SOURCES_C.mpglib = $(Mpglib_P)/common.c $(Mpglib_P)/dct64_i386.c $(Mpglib_P)/decode_i386.c $(Mpglib_P)/interface.c $(Mpglib_P)/layer1.c $(Mpglib_P)/layer2.c $(Mpglib_P)/layer3.c $(Mpglib_P)/tabinit.c
SOURCES_C = $(SOURCES_C.mpglib) $(SOURCES_C.mp3lame) $(PORTAUDIO_SRCS_TEMPLATE) $(SOURCES_C.opensmile) $(SOURCES_C.port_com) 

SOURCES = $(SOURCES_C) $(SOURCES_CPP)

OBJECTS = $(SOURCES_C:.c=.o) $(SOURCES_CPP:.cpp=.o)
